<?xml version="1.0"?>
<doc>
    <assembly>
        <name>vgt-saga-orders</name>
    </assembly>
    <members>
        <member name="T:vgt_saga_orders.Migrations.Initial">
            <inheritdoc />
        </member>
        <member name="M:vgt_saga_orders.Migrations.Initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:vgt_saga_orders.Migrations.Initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:vgt_saga_orders.Migrations.Initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:vgt_saga_orders.Models.SagaDbContext">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Models.SagaDbContext.Transactions">
            <summary>
            Set of Database Transaction entities mapped to Transaction objects
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Models.SagaDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{vgt_saga_orders.Models.SagaDbContext})">
            <inheritdoc />
        </member>
        <member name="T:vgt_saga_orders.Models.Transaction">
            <summary>
            Transaction object representing an object from the database
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Models.Transaction.#ctor">
            <summary>
            Transaction object representing an object from the database
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Models.Transaction.TransactionId">
            <summary>
            Guid of the SAGA transaction
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Models.Transaction.OfferId">
            <summary>
            Id of the offer as specified by the backend (verifies if another transaction for this 
            </summary>
        </member>
        <member name="T:vgt_saga_orders.Orchestrator.IServiceHandler">
            <summary>
            Orchestrator handlers of the services in the SAGA architecture,
            each service has its own handler.
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.Replies">
            <summary>
            Replies received from the service
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.Requests">
            <summary>
            Requests to the service
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.Publish">
            <summary>
            Messages that need to be sent out to the queues
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.CurrentRequest">
            <summary>
            current request handled
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.CurrentReply">
            <summary>
            current reply handled
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.RequestsTask">
            <summary>
            Task handling requests of the service
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.RepliesTask">
            <summary>
            Task handling replies to this service
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.IServiceHandler.Token">
            <summary>
            Cancellation token allowing a graceful exit of the class
            </summary>
        </member>
        <member name="T:vgt_saga_orders.Orchestrator.Orchestrator">
            <summary>
            Saga Orchestrator;
            handles all saga transactions of user orders.
            </summary>
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.Orchestrator.Token">
            <summary>
            Allows tasks cancellation from the outside of the class
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor of the Orchestrator class.
            Initializes Orchestrator object.
            Creates, initializes and opens connections to the database and rabbitmq
            based on configuration data present and handled by specified handling objects.
            Throws propagated exceptions if the configuration data is nowhere to be found.
            </summary>
            <param name="config"> Configuration with the connection params </param>
            <param name="lf"> Logger factory to use for the Event Store </param>
            <exception cref="T:System.ArgumentException"> Which variable is missing in the configuration </exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException"> Couldn't establish connection with RabbitMQ </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.RabbitPublisher">
            <summary>
            Publishes made messages to the right queues
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.SagaRepliesEventHandler(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Event Handler that hooks to the event of the queue consumer.
            Handles incoming replies from the RabbitMQ and routes them to the appropriate tasks.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.CreateChannels">
            <summary>
            Creates async channels to send received messages with to the tasks handling them.
            Channels are stored in the dictionary MessageType - Channel
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.Orchestrator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.Orchestrator.RepliesQueueHandler">
            <summary>
            Class handling RabbitMQ connections, messages and events;
            all concerning SAGA transactions with an orchestrator.
            Configuration data needed for this class is as follows.
            <p>
            <list type="bullet">
                <listheader><term>Rabbit connection:</term></listheader>
                <item><term>RABBIT_HOST</term> <description> - Address of the rabbit server.</description></item>
                <item><term>RABBIT_VIRT_HOST</term> <description> - Virtual host of the rabbit server.</description></item>
                <item><term>RABBIT_PORT</term> <description> - Port of the rabbit server.</description></item>
                <item><term>RABBIT_USR</term> <description> - Username to login with.</description></item>
                <item><term>RABBIT_PASSWORD</term> <description> - User password to login with.</description></item>
            </list>
            and
            <list type="bullet">
                <listheader><term>Queue names:</term></listheader>
                <item><term>RABBIT_REPLIES</term> <description> - Queue of the replies sent back to the orchestrator.</description></item>
                <item><term>RABBIT_ORDER</term> <description> - Queue of the requests sent by the orchestrator to the order service.</description></item>
                <item><term>RABBIT_PAYMENT</term> <description> - Queue of the requests sent by the orchestrator to the payment gate service.</description></item>
                <item><term>RABBIT_HOTEL</term> <description> - Queue of the requests sent by the orchestrator to the hotel service.</description></item>
                <item><term>RABBIT_FLIGHT</term> <description> - Queue of the requests sent by the orchestrator to the flight service.</description></item>
            </list>
            </p>
            </summary>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration,NLog.Logger)">
            <summary>
            Constructor of the RabbitMQ handling class.
            Initializes RabbitMQ handling object.
            Creates connection string/factory based on configuration data present
            with exceptions thrown if the data is nowhere to be found.
            </summary>
            <param name="config"> Configuration with the connection params </param>
            <param name="log"> logger to log to </param>
            <exception cref="T:System.ArgumentException"> Which variable is missing in the configuration </exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException"> Couldn't establish connection </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.PublishToOrders(System.String)">
            <summary>
            Publish saga message to Orders queue
            </summary>
            <param name="body"> json body of the message to send </param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.PublishToPayment(System.String)">
            <summary>
            Publish saga message to Payment queue
            </summary>
            <param name="body"> json body of the message to send </param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.PublishToHotel(System.String)">
            <summary>
            Publish saga message to Hotel queue
            </summary>
            <param name="body"> json body of the message to send </param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.PublishToFlight(System.String)">
            <summary>
            Publish saga message to Flight queue
            </summary>
            <param name="body"> json body of the message to send </param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.PublishTagResponse(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Boolean)">
            <summary>
            Handles RabbitMQ message tag and posts the acceptance or rejection,
            </summary>
            <param name="ea"> tag to answer </param>
            <param name="state"> ack/reject </param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.AddRepliesConsumer(System.EventHandler{RabbitMQ.Client.Events.BasicDeliverEventArgs})">
            <summary>
            Create queue consumer and hook to the event specifying incoming replies.
            </summary>
            <param name="handler"> handler to assign to the consumer event </param>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.GetQueuesFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Get the list of all saga queues defined in the configuration.
            Logs, Creates and Throws ArgumentError if a queue name is not present.
            </summary>
            <param name="config"> Configuration to take the values from </param>
            <returns> List of queue names </returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.GetConnectionFactoryFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates connection factory to the RabbitMQ
            based on the data specified in the configuration file or env variables
            </summary>
            <param name="config"> Configuration to use </param>
            <returns> ConnectionFactory with specified connection params </returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.ThrowException``1(System.String)">
            <summary>
            Logs, creates and throws the exception that the specified variable is not present in the config
            </summary>
            <param name="argument"> Variable not present </param>
            <typeparam name="T"> type to "return" </typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.RepliesQueueHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.Replies">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.Requests">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.Publish">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.CurrentRequest">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.CurrentReply">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.RequestsTask">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.RepliesTask">
            <inheritdoc />
        </member>
        <member name="P:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.Token">
            <inheritdoc />
        </member>
        <member name="M:vgt_saga_orders.Orchestrator.ServiceHandlers.OrchOrderHandler.#ctor(System.Threading.Channels.Channel{vgt_saga_serialization.Message},System.Threading.Channels.Channel{vgt_saga_serialization.Message},System.Threading.Channels.Channel{vgt_saga_serialization.Message},NEventStore.IStoreEvents,NLog.Logger)">
            <summary>
            Creates Orchestrator tasks handling Order service
            Saves, Changes and Routes messages from and to OrderService
            </summary>
            <param name="replies"> Replies to the order service </param>
            <param name="requests"> Requests from the order service </param>
            <param name="publish"> Messages that need to be sent to the broker </param>
            <param name="eventStore"> Event sourcing </param>
            <param name="log"> logger to use </param>
        </member>
        <member name="T:vgt_saga_orders.OrderService.OrderHandler">
            <summary>
            Handles saga orders beginning, end and failures
            Creates the appropriate saga messages
            Handles the data in messages
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.Replies">
            <summary>
            Replies received from the orchestrator
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.Requests">
            <summary>
            Requests to the orchestrator
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.Publish">
            <summary>
            Messages that need to be sent out to the queues
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.CurrentRequest">
            <summary>
            current request handled
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.CurrentReply">
            <summary>
            current reply handled
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.RequestsTask">
            <summary>
            Task of the requests handler
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.RepliesTask">
            <summary>
            Task of the Replies handler
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderHandler.Token">
            <summary>
            Token allowing tasks cancellation from the outside of the class
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderHandler.#ctor(System.Threading.Channels.Channel{vgt_saga_serialization.Message},System.Threading.Channels.Channel{vgt_saga_serialization.Message},System.Threading.Channels.Channel{vgt_saga_serialization.Message},NEventStore.IStoreEvents,NLog.Logger)">
            <summary>
            Default constructor of the order handler class
            that handles data and prepares messages concerning saga orders beginning, end and failure
            </summary>
            <param name="replies"> Queue with the replies from the orchestrator </param>
            <param name="requests"> Queue with the requests to the orchestrator </param>
            <param name="publish"> Queue with messages that need to be published to RabbitMQ </param>
            <param name="eventStore"> EventStore for the event sourcing and CQRS </param>
            <param name="log"> logger to log to </param>
        </member>
        <member name="T:vgt_saga_orders.OrderService.OrderQueueHandler">
            <summary>
            Class handling RabbitMQ connections, messages and events;
            all concerning SAGA transactions with an orchestrator.
            Configuration data needed for this class is as follows.
            <p>
            <list type="bullet">
                <listheader><term>Rabbit connection:</term></listheader>
                <item><term>RABBIT_HOST</term> <description> - Address of the rabbit server.</description></item>
                <item><term>RABBIT_VIRT_HOST</term> <description> - Virtual host of the rabbit server.</description></item>
                <item><term>RABBIT_PORT</term> <description> - Port of the rabbit server.</description></item>
                <item><term>RABBIT_USR</term> <description> - Username to login with.</description></item>
                <item><term>RABBIT_PASSWORD</term> <description> - User password to login with.</description></item>
            </list>
            and
            <list type="bullet">
                <listheader><term>Queue names:</term></listheader>
                <item><term>RABBIT_REPLIES</term> <description> - Queue of the replies sent back to the orchestrator.</description></item>
                <item><term>RABBIT_ORDER</term> <description> - Queue of the requests sent by the orchestrator to the order service.</description></item>
            </list>
            </p>
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration,NLog.Logger)">
            <summary>
            Constructor of the RabbitMQ handling class.
            Initializes RabbitMQ handling object.
            Creates connection string/factory based on configuration data present
            with exceptions thrown if the data is nowhere to be found.
            </summary>
            <param name="config"> Configuration with the connection params </param>
            <param name="log"> logger to log to </param>
            <exception cref="T:System.ArgumentException"> Which variable is missing in the configuration </exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException"> Couldn't establish connection </exception>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.PublishToOrchestrator(System.String)">
            <summary>
            Publish saga message to Orchestrator queue
            </summary>
            <param name="body"> json body of the message to send </param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.PublishToBackend(System.String)">
            <summary>
            Publish the message to Backend exchange
            answers requests from the backend
            </summary>
            <param name="body"> json body of the message to send </param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.PublishTagResponse(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Boolean)">
            <summary>
            Handles RabbitMQ message tag and posts the acceptance or rejection,
            </summary>
            <param name="ea"> tag to answer </param>
            <param name="state"> ack/reject </param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.PublishBackendTagResponse(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Boolean)">
            <summary>
            Handles RabbitMQ message tag and posts the acceptance or rejection,
            </summary>
            <param name="ea"> tag to answer </param>
            <param name="state"> ack/reject </param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.AddRepliesConsumer(System.EventHandler{RabbitMQ.Client.Events.BasicDeliverEventArgs})">
            <summary>
            Create queue consumer and hook to the event specifying incoming requests.
            </summary>
            <param name="handler"> handler to assign to the consumer event </param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.AddBackendConsumer(System.EventHandler{RabbitMQ.Client.Events.BasicDeliverEventArgs})">
            <summary>
            Create queue consumer and hook to the event specifying incoming requests.
            </summary>
            <param name="handler"> handler to assign to the consumer event </param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.GetQueuesFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Get the list of all saga queues defined in the configuration.
            Logs, Creates and Throws ArgumentError if a queue name is not present.
            </summary>
            <param name="config"> Configuration to take the values from </param>
            <returns> List of queue names </returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.GetConnectionFactoryFromConfig(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates connection factory to the RabbitMQ
            based on the data specified in the configuration file or env variables
            </summary>
            <param name="config"> Configuration to use </param>
            <returns> ConnectionFactory with specified connection params </returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.ThrowException``1(System.String)">
            <summary>
            Logs, creates and throws the exception that the specified variable is not present in the config
            </summary>
            <param name="argument"> Variable not present </param>
            <typeparam name="T"> type to "return" </typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderQueueHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.OrderService.OrderService">
            <summary>
            Saga Orchestrator;
            handles all saga transactions of user orders.
            </summary>
        </member>
        <member name="P:vgt_saga_orders.OrderService.OrderService.Token">
            <summary>
            Allows tasks cancellation from the outside of the class
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor of the OrderService class.
            Initializes OrderService object.
            Creates, initializes and opens connections to the database and rabbitmq
            based on configuration data present and handled by specified handling objects.
            Throws propagated exceptions if the configuration data is nowhere to be found.
            </summary>
            <param name="config"> Configuration with the connection params </param>
            <param name="lf"> Logger factory to use by the event store </param>
            <exception cref="T:System.ArgumentException"> Which variable is missing in the configuration </exception>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException"> Couldn't establish connection with RabbitMQ </exception>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.RabbitPublisher">
            <summary>
            Publishes made messages to the right queues
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.SagaOrdersEventHandler(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Event Handler that hooks to the event of the queue consumer.
            Handles incoming replies from the RabbitMQ and routes them to the appropriate tasks.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.BackendOrdersEventHandler(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Event Handler that hooks to the event of the queue consumer.
            Handles incoming replies from the RabbitMQ and routes them to the appropriate tasks.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.CreateChannels">
            <summary>
            Creates async channels to send received messages with to the tasks handling them.
            Channels are stored in the dictionary MessageType - Channel
            </summary>
        </member>
        <member name="M:vgt_saga_orders.OrderService.OrderService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_orders.SecretUtils">
            <summary>
            Utils decoding secrets from the configuration files or environmental variables
            </summary>
        </member>
        <member name="M:vgt_saga_orders.SecretUtils.GetConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String,NLog.Logger)">
            <summary>
            Gets SQL connection data from the configuration and merges that data into the connection string
            </summary>
            <param name="config"> configuration of the application </param>
            <param name="dbName"> Name of the database env variable to use for the connection</param>
            <param name="log"> logger to log to errors</param>
            <returns> Merged connection string </returns>
            <exception cref="T:System.ArgumentException"> Thrown if configuration param was not found </exception>
        </member>
        <member name="M:vgt_saga_orders.SecretUtils.ThrowException``1(System.String,NLog.Logger)">
            <summary>
            Logs, creates and throws the exception that the specified variable is not present in the config
            </summary>
            <param name="argument"> Variable not present </param>
            <param name="log"></param>
            <typeparam name="T"> type to "return" </typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"> Which variable is missing </exception>
        </member>
        <member name="T:vgt_saga_serialization.IMessageBody">
            <summary>
            Message body of the request or reply
            contains data needed by the microservice for the transaction
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.Message">
            <summary>
            Main message template of the SAGA messages
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.TransactionId">
            <summary>
            A unique identifier that spans the whole transaction
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.MessageId">
            <summary>
            A unique identifier per message
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.CreationDate">
            <summary>
            The creation date of the message
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.MessageType">
            <summary>
            A message type used by producers/consumers to identify events and commands
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.State">
            <summary>
            Saga transaction state of the message
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.Message.Body">
            <summary>
            Body of the command of type specified in MessageType
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageType">
            <summary>
            Implemented message type bodies 
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.OrderRequest">
            <summary>
            body type of the requests incoming to the Order microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.OrderReply">
            <summary>
            body type of the replies incoming from the Order microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.PaymentRequest">
            <summary>
            body type of the requests incoming to the Payment microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.PaymentReply">
            <summary>
            body type of the requests incoming from the Payment microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.HotelRequest">
            <summary>
            body type of the requests incoming to the Hotel microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.HotelReply">
            <summary>
            body type of the requests incoming from the Hotel microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.FlightRequest">
            <summary>
            body type of the requests incoming to the Flight microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.FlightReply">
            <summary>
            body type of the requests incoming from the Flight microservice
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.BackendRequest">
            <summary>
            body type of the request from the WebApp backend,
            contains all required data needed to start order saga transaction
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.BackendReply">
            <summary>
            body type of the reply to the backend from the Saga Order Service,
            notifies all backend that the transaction finished
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.MessageType.Invalid">
            <summary>
            specifies that the message is invalid
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.SagaState">
            <summary>
            Implemented Saga states the transaction could be on
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.Begin">
            <summary>
            saga transaction has started
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.HotelTimedAccept">
            <summary>
            saga hotel timed reservation passed successfully
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.HotelTimedFail">
            <summary>
            saga hotel timed reservation failed
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.HotelTimedRollback">
            <summary>
            saga hotel timed reservation rollback
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.HotelFullAccept">
            <summary>
            saga hotel full reservation passed successfully
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.HotelFullFail">
            <summary>
            saga hotel full reservation failed
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.HotelFullRollback">
            <summary>
            saga hotel full reservation rollback
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.FlightTimedAccept">
            <summary>
            saga flight timed reservation passed successfully
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.FlightTimedFail">
            <summary>
            saga flight timed reservation failed
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.FlightTimedRollback">
            <summary>
            saga flight timed reservation rollback
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.FlightFullAccept">
            <summary>
            saga flight full reservation passed successfully
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.FlightFullFail">
            <summary>
            saga flight full reservation failed
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.FlightFullRollback">
            <summary>
            saga flight full reservation rollback
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.PaymentAccept">
            <summary>
            saga payment passed successfully
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.PaymentFailed">
            <summary>
            saga payment failed
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.SagaSuccess">
            <summary>
            saga transaction passed successfully
            </summary>
        </member>
        <member name="F:vgt_saga_serialization.SagaState.SagaFail">
            <summary>
            saga transaction failed
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.BackendReply">
            <summary>
            reply from the OrderService to all the backends
            notifies the backends of the finished saga transaction
            It is sent to all instances of the backend
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.BackendReply.#ctor">
            <summary>
            reply from the OrderService to all the backends
            notifies the backends of the finished saga transaction
            It is sent to all instances of the backend
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.BackendRequest">
            <summary>
            request from the backend 
            contains the data that is needed for the saga transaction order
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.BackendRequest.#ctor">
            <summary>
            request from the backend 
            contains the data that is needed for the saga transaction order
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.FlightReply">
            <summary>
            reply of the hotel service
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.FlightReply.#ctor">
            <summary>
            reply of the hotel service
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightReply.FlightId">
            <summary>
            ID number of the flight that got selected
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightReply.ReturnFlightId">
            <summary>
            ID number of the return flight that got selected
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightReply.SeatNr">
            <summary>
            List of seats selected
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.FlightRequest">
            <summary>
            request to the hotel service
            contains definition if the reservation is temporary (wait for payment)
            and all the data service needs
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.FlightRequest.#ctor">
            <summary>
            request to the hotel service
            contains definition if the reservation is temporary (wait for payment)
            and all the data service needs
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.Temporary">
            <summary>
            If the flight needs to be reserved for a limited time waiting for a payment
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.CityFrom">
            <summary>
            City the flight takes off
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.CityTo">
            <summary>
            city the flight lands in
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.BookFrom">
            <summary>
            date the flight to the hotel takes place
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.BookTo">
            <summary>
            date the return flight takes place
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.PassangerCount">
            <summary>
            amount of the passengers to take
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.FlightId">
            <summary>
            Flight ID to book on full book
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.FlightRequest.SeatNr">
            <summary>
            Seats on the flight to fully book
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.HotelReply">
            <summary>
            reply of the hotel service
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.HotelReply.#ctor">
            <summary>
            reply of the hotel service
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelReply.RoomId">
            <summary>
            RoomId booked
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.HotelRequest">
            <summary>
            request to the hotel service
            contains definition if the reservation is temporary (wait for payment)
            and all the data service needs
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.HotelRequest.#ctor">
            <summary>
            request to the hotel service
            contains definition if the reservation is temporary (wait for payment)
            and all the data service needs
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.Temporary">
            <summary>
            If the hotel needs to be reserved for a limited time waiting for a payment
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.RoomType">
            <summary>
            type of the room to find and book
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.HotelName">
            <summary>
            Hotel name the room should be looked for
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.AirportCity">
            <summary>
            City of the airport the hotel uses
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.BookFrom">
            <summary>
            date to book the hotel from
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.BookTo">
            <summary>
            date to book the hotel to
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.HotelRequest.RoomId">
            <summary>
            RoomId to fully book
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.OrderReply">
            <summary>
            all the saga order transaction data that needs to be returned? 
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.OrderReply.#ctor">
            <summary>
            all the saga order transaction data that needs to be returned? 
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.OrderRequest">
            <summary>
            All the saga order transaction data
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.OrderRequest.#ctor">
            <summary>
            All the saga order transaction data
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.PaymentReply">
            <summary>
            reply of the payment gate, current no additional data needed
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.PaymentReply.#ctor">
            <summary>
            reply of the payment gate, current no additional data needed
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.MessageBodies.PaymentRequest">
            <summary>
            request to the payment gate with the amount to pay and currency specified
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.MessageBodies.PaymentRequest.#ctor">
            <summary>
            request to the payment gate with the amount to pay and currency specified
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.PaymentRequest.Amount">
            <summary>
            Amount to pay
            </summary>
        </member>
        <member name="P:vgt_saga_serialization.MessageBodies.PaymentRequest.Currency">
            <summary>
            Currency of the payment
            </summary>
        </member>
        <member name="T:vgt_saga_serialization.SagaJsonConverter">
            <summary>
            Converter class used to differentiate between implemented types of the message body.
            Serializes and deserializes json to and from the targeted record structs.
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.SagaJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:vgt_saga_serialization.SagaJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes json to targeted MessageBody
            </summary>
            <inheritdoc/>
            <returns> IMessageBody of the appropriate type </returns>
        </member>
        <member name="M:vgt_saga_serialization.SagaJsonConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:vgt_saga_serialization.Utils">
            <summary>
            Util class for the SAGA messages serialization handling.
            Util offers deserialization and serialization of the JSON messages to the appropriate types of the messages.
            Uses custom JsonConverter.
            </summary>
        </member>
        <member name="M:vgt_saga_serialization.Utils.#ctor(NLog.Logger)">
            <summary>
            Default constructor for the Utils class.
            Utils object specifies the appropriate logger for the operations.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:vgt_saga_serialization.Utils.Deserialize(System.Byte[])">
            <summary>
            Deserializes JSON written in bytes from the RabbitMQ to the Saga Message struct
            with targeted and appropriate MessageBody of the specified Type.
            </summary>
            <param name="body"> Json in bytes to deserialize </param>
            <returns> null if invalid otherwise deserialized Saga Message</returns>
        </member>
        <member name="M:vgt_saga_serialization.Utils.Serialize(vgt_saga_serialization.Message)">
            <summary>
            Serializes SAGA Message struct to a string JSON
            </summary>
            <param name="message"> Saga Message struct to serialize </param>
            <returns> string containing JSON </returns>
        </member>
    </members>
</doc>
